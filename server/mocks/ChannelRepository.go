// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	model "github.com/sentrionic/valkyrie/model"
	mock "github.com/stretchr/testify/mock"
)

// ChannelRepository is an autogenerated mock type for the ChannelRepository type
type ChannelRepository struct {
	mock.Mock
}

// AddDMChannelMembers provides a mock function with given fields: members
func (_m *ChannelRepository) AddDMChannelMembers(members []model.DMMember) error {
	ret := _m.Called(members)

	var r0 error
	if rf, ok := ret.Get(0).(func([]model.DMMember) error); ok {
		r0 = rf(members)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPrivateChannelMembers provides a mock function with given fields: memberIds, channelId
func (_m *ChannelRepository) AddPrivateChannelMembers(memberIds []string, channelId string) error {
	ret := _m.Called(memberIds, channelId)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string) error); ok {
		r0 = rf(memberIds, channelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CleanPCMembers provides a mock function with given fields: channelId
func (_m *ChannelRepository) CleanPCMembers(channelId string) error {
	ret := _m.Called(channelId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(channelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: channel
func (_m *ChannelRepository) Create(channel *model.Channel) (*model.Channel, error) {
	ret := _m.Called(channel)

	var r0 *model.Channel
	if rf, ok := ret.Get(0).(func(*model.Channel) *model.Channel); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Channel) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannel provides a mock function with given fields: channel
func (_m *ChannelRepository) DeleteChannel(channel *model.Channel) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindDMByUserAndChannelId provides a mock function with given fields: channelId, userId
func (_m *ChannelRepository) FindDMByUserAndChannelId(channelId string, userId string) (string, error) {
	ret := _m.Called(channelId, userId)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(channelId, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: userId, guildId
func (_m *ChannelRepository) Get(userId string, guildId string) (*[]model.ChannelResponse, error) {
	ret := _m.Called(userId, guildId)

	var r0 *[]model.ChannelResponse
	if rf, ok := ret.Get(0).(func(string, string) *[]model.ChannelResponse); ok {
		r0 = rf(userId, guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.ChannelResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: channelId
func (_m *ChannelRepository) GetById(channelId string) (*model.Channel, error) {
	ret := _m.Called(channelId)

	var r0 *model.Channel
	if rf, ok := ret.Get(0).(func(string) *model.Channel); ok {
		r0 = rf(channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDMMemberIds provides a mock function with given fields: channelId
func (_m *ChannelRepository) GetDMMemberIds(channelId string) (*[]string, error) {
	ret := _m.Called(channelId)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(string) *[]string); ok {
		r0 = rf(channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDirectMessageChannel provides a mock function with given fields: userId, memberId
func (_m *ChannelRepository) GetDirectMessageChannel(userId string, memberId string) (*string, error) {
	ret := _m.Called(userId, memberId)

	var r0 *string
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(userId, memberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, memberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDirectMessages provides a mock function with given fields: userId
func (_m *ChannelRepository) GetDirectMessages(userId string) (*[]model.DirectMessage, error) {
	ret := _m.Called(userId)

	var r0 *[]model.DirectMessage
	if rf, ok := ret.Get(0).(func(string) *[]model.DirectMessage); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.DirectMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildDefault provides a mock function with given fields: guildId
func (_m *ChannelRepository) GetGuildDefault(guildId string) (*model.Channel, error) {
	ret := _m.Called(guildId)

	var r0 *model.Channel
	if rf, ok := ret.Get(0).(func(string) *model.Channel); ok {
		r0 = rf(guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateChannelMembers provides a mock function with given fields: channelId
func (_m *ChannelRepository) GetPrivateChannelMembers(channelId string) (*[]string, error) {
	ret := _m.Called(channelId)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(string) *[]string); ok {
		r0 = rf(channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenDMForAll provides a mock function with given fields: dmId
func (_m *ChannelRepository) OpenDMForAll(dmId string) error {
	ret := _m.Called(dmId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dmId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePrivateChannelMembers provides a mock function with given fields: memberIds, channelId
func (_m *ChannelRepository) RemovePrivateChannelMembers(memberIds []string, channelId string) error {
	ret := _m.Called(memberIds, channelId)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string) error); ok {
		r0 = rf(memberIds, channelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDirectMessageStatus provides a mock function with given fields: dmId, userId, isOpen
func (_m *ChannelRepository) SetDirectMessageStatus(dmId string, userId string, isOpen bool) error {
	ret := _m.Called(dmId, userId, isOpen)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(dmId, userId, isOpen)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateChannel provides a mock function with given fields: channel
func (_m *ChannelRepository) UpdateChannel(channel *model.Channel) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
