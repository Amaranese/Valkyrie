// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/sentrionic/valkyrie/model"
	mock "github.com/stretchr/testify/mock"
)

// RedisRepository is an autogenerated mock type for the RedisRepository type
type RedisRepository struct {
	mock.Mock
}

// GetIdFromToken provides a mock function with given fields: ctx, token
func (_m *RedisRepository) GetIdFromToken(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvite provides a mock function with given fields: ctx, token
func (_m *RedisRepository) GetInvite(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateInvites provides a mock function with given fields: ctx, guild
func (_m *RedisRepository) InvalidateInvites(ctx context.Context, guild *model.Guild) {
	_m.Called(ctx, guild)
}

// SaveInvite provides a mock function with given fields: ctx, guildId, id, isPermanent
func (_m *RedisRepository) SaveInvite(ctx context.Context, guildId string, id string, isPermanent bool) error {
	ret := _m.Called(ctx, guildId, id, isPermanent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, guildId, id, isPermanent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetResetToken provides a mock function with given fields: ctx, id
func (_m *RedisRepository) SetResetToken(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
