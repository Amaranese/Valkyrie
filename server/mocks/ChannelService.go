// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	model "github.com/sentrionic/valkyrie/model"
	mock "github.com/stretchr/testify/mock"
)

// ChannelService is an autogenerated mock type for the ChannelService type
type ChannelService struct {
	mock.Mock
}

// AddDMChannelMembers provides a mock function with given fields: memberIds, channelId, userId
func (_m *ChannelService) AddDMChannelMembers(memberIds []string, channelId string, userId string) error {
	ret := _m.Called(memberIds, channelId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string, string) error); ok {
		r0 = rf(memberIds, channelId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPrivateChannelMembers provides a mock function with given fields: memberIds, channelId
func (_m *ChannelService) AddPrivateChannelMembers(memberIds []string, channelId string) error {
	ret := _m.Called(memberIds, channelId)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string) error); ok {
		r0 = rf(memberIds, channelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CleanPCMembers provides a mock function with given fields: channelId
func (_m *ChannelService) CleanPCMembers(channelId string) error {
	ret := _m.Called(channelId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(channelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateChannel provides a mock function with given fields: channel
func (_m *ChannelService) CreateChannel(channel *model.Channel) (*model.Channel, error) {
	ret := _m.Called(channel)

	var r0 *model.Channel
	if rf, ok := ret.Get(0).(func(*model.Channel) *model.Channel); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Channel) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannel provides a mock function with given fields: channel
func (_m *ChannelService) DeleteChannel(channel *model.Channel) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: channelId
func (_m *ChannelService) Get(channelId string) (*model.Channel, error) {
	ret := _m.Called(channelId)

	var r0 *model.Channel
	if rf, ok := ret.Get(0).(func(string) *model.Channel); ok {
		r0 = rf(channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannels provides a mock function with given fields: userId, guildId
func (_m *ChannelService) GetChannels(userId string, guildId string) (*[]model.ChannelResponse, error) {
	ret := _m.Called(userId, guildId)

	var r0 *[]model.ChannelResponse
	if rf, ok := ret.Get(0).(func(string, string) *[]model.ChannelResponse); ok {
		r0 = rf(userId, guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.ChannelResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDMByUserAndChannel provides a mock function with given fields: userId, channelId
func (_m *ChannelService) GetDMByUserAndChannel(userId string, channelId string) (string, error) {
	ret := _m.Called(userId, channelId)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(userId, channelId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDirectMessageChannel provides a mock function with given fields: userId, memberId
func (_m *ChannelService) GetDirectMessageChannel(userId string, memberId string) (*string, error) {
	ret := _m.Called(userId, memberId)

	var r0 *string
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(userId, memberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, memberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDirectMessages provides a mock function with given fields: userId
func (_m *ChannelService) GetDirectMessages(userId string) (*[]model.DirectMessage, error) {
	ret := _m.Called(userId)

	var r0 *[]model.DirectMessage
	if rf, ok := ret.Get(0).(func(string) *[]model.DirectMessage); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.DirectMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateChannelMembers provides a mock function with given fields: channelId
func (_m *ChannelService) GetPrivateChannelMembers(channelId string) (*[]string, error) {
	ret := _m.Called(channelId)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(string) *[]string); ok {
		r0 = rf(channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsChannelMember provides a mock function with given fields: channel, userId
func (_m *ChannelService) IsChannelMember(channel *model.Channel, userId string) error {
	ret := _m.Called(channel, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Channel, string) error); ok {
		r0 = rf(channel, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenDMForAll provides a mock function with given fields: dmId
func (_m *ChannelService) OpenDMForAll(dmId string) error {
	ret := _m.Called(dmId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dmId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePrivateChannelMembers provides a mock function with given fields: memberIds, channelId
func (_m *ChannelService) RemovePrivateChannelMembers(memberIds []string, channelId string) error {
	ret := _m.Called(memberIds, channelId)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string) error); ok {
		r0 = rf(memberIds, channelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDirectMessageStatus provides a mock function with given fields: dmId, userId, isOpen
func (_m *ChannelService) SetDirectMessageStatus(dmId string, userId string, isOpen bool) error {
	ret := _m.Called(dmId, userId, isOpen)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(dmId, userId, isOpen)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateChannel provides a mock function with given fields: channel
func (_m *ChannelService) UpdateChannel(channel *model.Channel) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
