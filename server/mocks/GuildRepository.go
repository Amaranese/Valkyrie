// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	model "github.com/sentrionic/valkyrie/model"
	mock "github.com/stretchr/testify/mock"
)

// GuildRepository is an autogenerated mock type for the GuildRepository type
type GuildRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: guild
func (_m *GuildRepository) Create(guild *model.Guild) (*model.Guild, error) {
	ret := _m.Called(guild)

	var r0 *model.Guild
	if rf, ok := ret.Get(0).(func(*model.Guild) *model.Guild); ok {
		r0 = rf(guild)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Guild) error); ok {
		r1 = rf(guild)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: guildId
func (_m *GuildRepository) Delete(guildId string) error {
	ret := _m.Called(guildId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(guildId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: id
func (_m *GuildRepository) FindByID(id string) (*model.Guild, error) {
	ret := _m.Called(id)

	var r0 *model.Guild
	if rf, ok := ret.Get(0).(func(string) *model.Guild); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: uid
func (_m *GuildRepository) FindUserByID(uid string) (*model.User, error) {
	ret := _m.Called(uid)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUsersByIds provides a mock function with given fields: ids, guildId
func (_m *GuildRepository) FindUsersByIds(ids []string, guildId string) (*[]model.User, error) {
	ret := _m.Called(ids, guildId)

	var r0 *[]model.User
	if rf, ok := ret.Get(0).(func([]string, string) *[]model.User); ok {
		r0 = rf(ids, guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(ids, guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBanList provides a mock function with given fields: guildId
func (_m *GuildRepository) GetBanList(guildId string) (*[]model.BanResponse, error) {
	ret := _m.Called(guildId)

	var r0 *[]model.BanResponse
	if rf, ok := ret.Get(0).(func(string) *[]model.BanResponse); ok {
		r0 = rf(guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.BanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMember provides a mock function with given fields: userId, guildId
func (_m *GuildRepository) GetMember(userId string, guildId string) (*model.User, error) {
	ret := _m.Called(userId, guildId)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, string) *model.User); ok {
		r0 = rf(userId, guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMemberIds provides a mock function with given fields: guildId
func (_m *GuildRepository) GetMemberIds(guildId string) (*[]string, error) {
	ret := _m.Called(guildId)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(string) *[]string); ok {
		r0 = rf(guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMemberSettings provides a mock function with given fields: userId, guildId
func (_m *GuildRepository) GetMemberSettings(userId string, guildId string) (*model.MemberSettings, error) {
	ret := _m.Called(userId, guildId)

	var r0 *model.MemberSettings
	if rf, ok := ret.Get(0).(func(string, string) *model.MemberSettings); ok {
		r0 = rf(userId, guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MemberSettings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildMembers provides a mock function with given fields: userId, guildId
func (_m *GuildRepository) GuildMembers(userId string, guildId string) (*[]model.MemberResponse, error) {
	ret := _m.Called(userId, guildId)

	var r0 *[]model.MemberResponse
	if rf, ok := ret.Get(0).(func(string, string) *[]model.MemberResponse); ok {
		r0 = rf(userId, guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.MemberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: uid
func (_m *GuildRepository) List(uid string) (*[]model.GuildResponse, error) {
	ret := _m.Called(uid)

	var r0 *[]model.GuildResponse
	if rf, ok := ret.Get(0).(func(string) *[]model.GuildResponse); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.GuildResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMember provides a mock function with given fields: userId, guildId
func (_m *GuildRepository) RemoveMember(userId string, guildId string) error {
	ret := _m.Called(userId, guildId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, guildId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: guild
func (_m *GuildRepository) Save(guild *model.Guild) error {
	ret := _m.Called(guild)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Guild) error); ok {
		r0 = rf(guild)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnbanMember provides a mock function with given fields: userId, guildId
func (_m *GuildRepository) UnbanMember(userId string, guildId string) error {
	ret := _m.Called(userId, guildId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, guildId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMemberLastSeen provides a mock function with given fields: userId, guildId
func (_m *GuildRepository) UpdateMemberLastSeen(userId string, guildId string) error {
	ret := _m.Called(userId, guildId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, guildId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMemberSettings provides a mock function with given fields: settings, userId, guildId
func (_m *GuildRepository) UpdateMemberSettings(settings *model.MemberSettings, userId string, guildId string) error {
	ret := _m.Called(settings, userId, guildId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.MemberSettings, string, string) error); ok {
		r0 = rf(settings, userId, guildId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
