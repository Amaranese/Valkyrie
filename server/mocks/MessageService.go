// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	model "github.com/sentrionic/valkyrie/model"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// MessageService is an autogenerated mock type for the MessageService type
type MessageService struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: params
func (_m *MessageService) CreateMessage(params *model.Message) (*model.Message, error) {
	ret := _m.Called(params)

	var r0 *model.Message
	if rf, ok := ret.Get(0).(func(*model.Message) *model.Message); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Message) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMessage provides a mock function with given fields: message
func (_m *MessageService) DeleteMessage(message *model.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: messageId
func (_m *MessageService) Get(messageId string) (*model.Message, error) {
	ret := _m.Called(messageId)

	var r0 *model.Message
	if rf, ok := ret.Get(0).(func(string) *model.Message); ok {
		r0 = rf(messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: userId, channel, cursor
func (_m *MessageService) GetMessages(userId string, channel *model.Channel, cursor string) (*[]model.MessageResponse, error) {
	ret := _m.Called(userId, channel, cursor)

	var r0 *[]model.MessageResponse
	if rf, ok := ret.Get(0).(func(string, *model.Channel, string) *[]model.MessageResponse); ok {
		r0 = rf(userId, channel, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.MessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *model.Channel, string) error); ok {
		r1 = rf(userId, channel, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMessage provides a mock function with given fields: message
func (_m *MessageService) UpdateMessage(message *model.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadFile provides a mock function with given fields: header, channelId
func (_m *MessageService) UploadFile(header *multipart.FileHeader, channelId string) (*model.Attachment, error) {
	ret := _m.Called(header, channelId)

	var r0 *model.Attachment
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, string) *model.Attachment); ok {
		r0 = rf(header, channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Attachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*multipart.FileHeader, string) error); ok {
		r1 = rf(header, channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
