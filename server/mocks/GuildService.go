// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/sentrionic/valkyrie/model"
	mock "github.com/stretchr/testify/mock"
)

// GuildService is an autogenerated mock type for the GuildService type
type GuildService struct {
	mock.Mock
}

// CreateGuild provides a mock function with given fields: guild
func (_m *GuildService) CreateGuild(guild *model.Guild) (*model.Guild, error) {
	ret := _m.Called(guild)

	var r0 *model.Guild
	if rf, ok := ret.Get(0).(func(*model.Guild) *model.Guild); ok {
		r0 = rf(guild)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Guild) error); ok {
		r1 = rf(guild)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGuild provides a mock function with given fields: guildId
func (_m *GuildService) DeleteGuild(guildId string) error {
	ret := _m.Called(guildId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(guildId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUsersByIds provides a mock function with given fields: ids, guildId
func (_m *GuildService) FindUsersByIds(ids []string, guildId string) (*[]model.User, error) {
	ret := _m.Called(ids, guildId)

	var r0 *[]model.User
	if rf, ok := ret.Get(0).(func([]string, string) *[]model.User); ok {
		r0 = rf(ids, guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(ids, guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateInviteLink provides a mock function with given fields: ctx, guildId, isPermanent
func (_m *GuildService) GenerateInviteLink(ctx context.Context, guildId string, isPermanent bool) (string, error) {
	ret := _m.Called(ctx, guildId, isPermanent)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) string); ok {
		r0 = rf(ctx, guildId, isPermanent)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, guildId, isPermanent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBanList provides a mock function with given fields: guildId
func (_m *GuildService) GetBanList(guildId string) (*[]model.BanResponse, error) {
	ret := _m.Called(guildId)

	var r0 *[]model.BanResponse
	if rf, ok := ret.Get(0).(func(string) *[]model.BanResponse); ok {
		r0 = rf(guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.BanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultChannel provides a mock function with given fields: guildId
func (_m *GuildService) GetDefaultChannel(guildId string) (*model.Channel, error) {
	ret := _m.Called(guildId)

	var r0 *model.Channel
	if rf, ok := ret.Get(0).(func(string) *model.Channel); ok {
		r0 = rf(guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuild provides a mock function with given fields: id
func (_m *GuildService) GetGuild(id string) (*model.Guild, error) {
	ret := _m.Called(id)

	var r0 *model.Guild
	if rf, ok := ret.Get(0).(func(string) *model.Guild); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Guild)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildIdFromInvite provides a mock function with given fields: ctx, token
func (_m *GuildService) GetGuildIdFromInvite(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuildMembers provides a mock function with given fields: userId, guildId
func (_m *GuildService) GetGuildMembers(userId string, guildId string) (*[]model.MemberResponse, error) {
	ret := _m.Called(userId, guildId)

	var r0 *[]model.MemberResponse
	if rf, ok := ret.Get(0).(func(string, string) *[]model.MemberResponse); ok {
		r0 = rf(userId, guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.MemberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMemberSettings provides a mock function with given fields: userId, guildId
func (_m *GuildService) GetMemberSettings(userId string, guildId string) (*model.MemberSettings, error) {
	ret := _m.Called(userId, guildId)

	var r0 *model.MemberSettings
	if rf, ok := ret.Get(0).(func(string, string) *model.MemberSettings); ok {
		r0 = rf(userId, guildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MemberSettings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, guildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: uid
func (_m *GuildService) GetUser(uid string) (*model.User, error) {
	ret := _m.Called(uid)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGuilds provides a mock function with given fields: uid
func (_m *GuildService) GetUserGuilds(uid string) (*[]model.GuildResponse, error) {
	ret := _m.Called(uid)

	var r0 *[]model.GuildResponse
	if rf, ok := ret.Get(0).(func(string) *[]model.GuildResponse); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.GuildResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateInvites provides a mock function with given fields: ctx, guild
func (_m *GuildService) InvalidateInvites(ctx context.Context, guild *model.Guild) {
	_m.Called(ctx, guild)
}

// RemoveMember provides a mock function with given fields: userId, guildId
func (_m *GuildService) RemoveMember(userId string, guildId string) error {
	ret := _m.Called(userId, guildId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, guildId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnbanMember provides a mock function with given fields: userId, guildId
func (_m *GuildService) UnbanMember(userId string, guildId string) error {
	ret := _m.Called(userId, guildId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, guildId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGuild provides a mock function with given fields: guild
func (_m *GuildService) UpdateGuild(guild *model.Guild) error {
	ret := _m.Called(guild)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Guild) error); ok {
		r0 = rf(guild)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMemberLastSeen provides a mock function with given fields: userId, guildId
func (_m *GuildService) UpdateMemberLastSeen(userId string, guildId string) error {
	ret := _m.Called(userId, guildId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, guildId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMemberSettings provides a mock function with given fields: settings, userId, guildId
func (_m *GuildService) UpdateMemberSettings(settings *model.MemberSettings, userId string, guildId string) error {
	ret := _m.Called(settings, userId, guildId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.MemberSettings, string, string) error); ok {
		r0 = rf(settings, userId, guildId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
